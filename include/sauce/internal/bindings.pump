$$ This is a Pump source file.  Please use Pump to convert it to
$$ generated_bindings.h
$$
$var n = 10  $$ The maximum arity we support.
// -*- C++ -*-
#ifndef SAUCE_SAUCE_INTERNAL_BINDINGS_H_
#define SAUCE_SAUCE_INTERNAL_BINDINGS_H_

#include <sauce/memory>

namespace sauce {
namespace internal {
namespace bindings {

template<typename Injector, typename Iface, typename Allocator, typename Constructor>
class New;

$range i 0..n
$for i [[
$range j 1..i
$var comma_typename_As = [[$for j [[, typename A$j]]]]
$var As = [[$for j, [[A$j]]]]
$var as = [[$for j, [[a$j]]]]

template<typename Injector_, typename Iface_, typename Allocator_, typename Impl_$comma_typename_As>
class New<Injector_, Iface_, Allocator_, Impl_($As)> {
public:
  typedef Iface_ Iface;
  typedef Impl_ Impl;
  typedef Allocator_ ImplAllocator;
  typedef typename ImplAllocator::pointer ImplPointer;
  typedef typename Allocator_::template rebind<Iface>::other IfaceAllocator;
  typedef typename IfaceAllocator::pointer IfacePointer;

  static ImplPointer provide(Injector_ const & injector) {
[[$for j [[
    SAUCE_SHARED_PTR<A$j> a$j(injector.template get<A$j>());

]]]]
    ImplAllocator allocator;
    ImplPointer impl = allocator.allocate(1);
    new(impl) Impl($as);
    return impl;
  }

  static void dispose(Injector_ const & injector, ImplPointer impl) {
    ImplAllocator allocator;
    impl->~Impl();
    allocator.deallocate(impl, 1);
  }
};

]]

}
}
}

#endif // SAUCE_SAUCE_INTERNAL_BINDINGS_H_