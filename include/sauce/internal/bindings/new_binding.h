// This file was GENERATED by command:
//     pump.py new_binding.h.pump
// DO NOT EDIT BY HAND!!!

#ifndef SAUCE_SAUCE_INTERNAL_BINDINGS_NEW_H_
#define SAUCE_SAUCE_INTERNAL_BINDINGS_NEW_H_

#include <sauce/injector.h>
#include <sauce/memory.h>
#include <sauce/named.h>
#include <sauce/internal/binding.h>
#include <sauce/internal/bindings/transparent.h>
#include <sauce/internal/key.h>
#include <sauce/internal/type_id.h>

namespace sauce {
namespace internal {
namespace bindings {

template<typename Dependency, typename Scope, typename Constructor,
    typename Allocator>
class NewBinding;

template<typename Dependency, typename Scope, typename Impl, typename Allocator>
struct NewBinding<Dependency, Scope, Impl(),
    Allocator>: public TransparentBinding<Dependency, Scope, Impl> {
  typedef typename Allocator::template rebind<Impl>::other ImplAllocator;

  Impl * provide(sauce::shared_ptr<Injector>, TypeIds &) const {
    ImplAllocator allocator;
    Impl * impl = allocator.allocate(1);
    new(impl) Impl();
    return impl;
  }

  void dispose(Impl * impl) const {
    ImplAllocator allocator;
    impl->~Impl(); // Must not throw
    allocator.deallocate(impl, 1);
  }
};

template<typename Dependency, typename Scope, typename Impl,
    typename Allocator, typename A1>
struct NewBinding<Dependency, Scope, Impl(A1),
    Allocator>: public TransparentBinding<Dependency, Scope, Impl> {
  typedef typename Allocator::template rebind<Impl>::other ImplAllocator;

  Impl * provide(sauce::shared_ptr<Injector> injector, TypeIds & ids) const {
    typename i::Key<A1>::Ptr a1(this->template getDependency<A1>(injector,
        ids));
    ImplAllocator allocator;
    Impl * impl = allocator.allocate(1);
    new(impl) Impl(a1);
    return impl;
  }

  void dispose(Impl * impl) const {
    ImplAllocator allocator;
    impl->~Impl(); // Must not throw
    allocator.deallocate(impl, 1);
  }
};

template<typename Dependency, typename Scope, typename Impl,
    typename Allocator, typename A1, typename A2>
struct NewBinding<Dependency, Scope, Impl(A1, A2),
    Allocator>: public TransparentBinding<Dependency, Scope, Impl> {
  typedef typename Allocator::template rebind<Impl>::other ImplAllocator;

  Impl * provide(sauce::shared_ptr<Injector> injector, TypeIds & ids) const {
    typename i::Key<A1>::Ptr a1(this->template getDependency<A1>(injector,
        ids));
    typename i::Key<A2>::Ptr a2(this->template getDependency<A2>(injector,
        ids));
    ImplAllocator allocator;
    Impl * impl = allocator.allocate(1);
    new(impl) Impl(a1, a2);
    return impl;
  }

  void dispose(Impl * impl) const {
    ImplAllocator allocator;
    impl->~Impl(); // Must not throw
    allocator.deallocate(impl, 1);
  }
};

template<typename Dependency, typename Scope, typename Impl,
    typename Allocator, typename A1, typename A2, typename A3>
struct NewBinding<Dependency, Scope, Impl(A1, A2, A3),
    Allocator>: public TransparentBinding<Dependency, Scope, Impl> {
  typedef typename Allocator::template rebind<Impl>::other ImplAllocator;

  Impl * provide(sauce::shared_ptr<Injector> injector, TypeIds & ids) const {
    typename i::Key<A1>::Ptr a1(this->template getDependency<A1>(injector,
        ids));
    typename i::Key<A2>::Ptr a2(this->template getDependency<A2>(injector,
        ids));
    typename i::Key<A3>::Ptr a3(this->template getDependency<A3>(injector,
        ids));
    ImplAllocator allocator;
    Impl * impl = allocator.allocate(1);
    new(impl) Impl(a1, a2, a3);
    return impl;
  }

  void dispose(Impl * impl) const {
    ImplAllocator allocator;
    impl->~Impl(); // Must not throw
    allocator.deallocate(impl, 1);
  }
};

template<typename Dependency, typename Scope, typename Impl,
    typename Allocator, typename A1, typename A2, typename A3, typename A4>
struct NewBinding<Dependency, Scope, Impl(A1, A2, A3, A4),
    Allocator>: public TransparentBinding<Dependency, Scope, Impl> {
  typedef typename Allocator::template rebind<Impl>::other ImplAllocator;

  Impl * provide(sauce::shared_ptr<Injector> injector, TypeIds & ids) const {
    typename i::Key<A1>::Ptr a1(this->template getDependency<A1>(injector,
        ids));
    typename i::Key<A2>::Ptr a2(this->template getDependency<A2>(injector,
        ids));
    typename i::Key<A3>::Ptr a3(this->template getDependency<A3>(injector,
        ids));
    typename i::Key<A4>::Ptr a4(this->template getDependency<A4>(injector,
        ids));
    ImplAllocator allocator;
    Impl * impl = allocator.allocate(1);
    new(impl) Impl(a1, a2, a3, a4);
    return impl;
  }

  void dispose(Impl * impl) const {
    ImplAllocator allocator;
    impl->~Impl(); // Must not throw
    allocator.deallocate(impl, 1);
  }
};

template<typename Dependency, typename Scope, typename Impl,
    typename Allocator, typename A1, typename A2, typename A3, typename A4,
    typename A5>
struct NewBinding<Dependency, Scope, Impl(A1, A2, A3, A4, A5),
    Allocator>: public TransparentBinding<Dependency, Scope, Impl> {
  typedef typename Allocator::template rebind<Impl>::other ImplAllocator;

  Impl * provide(sauce::shared_ptr<Injector> injector, TypeIds & ids) const {
    typename i::Key<A1>::Ptr a1(this->template getDependency<A1>(injector,
        ids));
    typename i::Key<A2>::Ptr a2(this->template getDependency<A2>(injector,
        ids));
    typename i::Key<A3>::Ptr a3(this->template getDependency<A3>(injector,
        ids));
    typename i::Key<A4>::Ptr a4(this->template getDependency<A4>(injector,
        ids));
    typename i::Key<A5>::Ptr a5(this->template getDependency<A5>(injector,
        ids));
    ImplAllocator allocator;
    Impl * impl = allocator.allocate(1);
    new(impl) Impl(a1, a2, a3, a4, a5);
    return impl;
  }

  void dispose(Impl * impl) const {
    ImplAllocator allocator;
    impl->~Impl(); // Must not throw
    allocator.deallocate(impl, 1);
  }
};

template<typename Dependency, typename Scope, typename Impl,
    typename Allocator, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6>
struct NewBinding<Dependency, Scope, Impl(A1, A2, A3, A4, A5, A6),
    Allocator>: public TransparentBinding<Dependency, Scope, Impl> {
  typedef typename Allocator::template rebind<Impl>::other ImplAllocator;

  Impl * provide(sauce::shared_ptr<Injector> injector, TypeIds & ids) const {
    typename i::Key<A1>::Ptr a1(this->template getDependency<A1>(injector,
        ids));
    typename i::Key<A2>::Ptr a2(this->template getDependency<A2>(injector,
        ids));
    typename i::Key<A3>::Ptr a3(this->template getDependency<A3>(injector,
        ids));
    typename i::Key<A4>::Ptr a4(this->template getDependency<A4>(injector,
        ids));
    typename i::Key<A5>::Ptr a5(this->template getDependency<A5>(injector,
        ids));
    typename i::Key<A6>::Ptr a6(this->template getDependency<A6>(injector,
        ids));
    ImplAllocator allocator;
    Impl * impl = allocator.allocate(1);
    new(impl) Impl(a1, a2, a3, a4, a5, a6);
    return impl;
  }

  void dispose(Impl * impl) const {
    ImplAllocator allocator;
    impl->~Impl(); // Must not throw
    allocator.deallocate(impl, 1);
  }
};

template<typename Dependency, typename Scope, typename Impl,
    typename Allocator, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7>
struct NewBinding<Dependency, Scope, Impl(A1, A2, A3, A4, A5, A6, A7),
    Allocator>: public TransparentBinding<Dependency, Scope, Impl> {
  typedef typename Allocator::template rebind<Impl>::other ImplAllocator;

  Impl * provide(sauce::shared_ptr<Injector> injector, TypeIds & ids) const {
    typename i::Key<A1>::Ptr a1(this->template getDependency<A1>(injector,
        ids));
    typename i::Key<A2>::Ptr a2(this->template getDependency<A2>(injector,
        ids));
    typename i::Key<A3>::Ptr a3(this->template getDependency<A3>(injector,
        ids));
    typename i::Key<A4>::Ptr a4(this->template getDependency<A4>(injector,
        ids));
    typename i::Key<A5>::Ptr a5(this->template getDependency<A5>(injector,
        ids));
    typename i::Key<A6>::Ptr a6(this->template getDependency<A6>(injector,
        ids));
    typename i::Key<A7>::Ptr a7(this->template getDependency<A7>(injector,
        ids));
    ImplAllocator allocator;
    Impl * impl = allocator.allocate(1);
    new(impl) Impl(a1, a2, a3, a4, a5, a6, a7);
    return impl;
  }

  void dispose(Impl * impl) const {
    ImplAllocator allocator;
    impl->~Impl(); // Must not throw
    allocator.deallocate(impl, 1);
  }
};

template<typename Dependency, typename Scope, typename Impl,
    typename Allocator, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7, typename A8>
struct NewBinding<Dependency, Scope, Impl(A1, A2, A3, A4, A5, A6, A7, A8),
    Allocator>: public TransparentBinding<Dependency, Scope, Impl> {
  typedef typename Allocator::template rebind<Impl>::other ImplAllocator;

  Impl * provide(sauce::shared_ptr<Injector> injector, TypeIds & ids) const {
    typename i::Key<A1>::Ptr a1(this->template getDependency<A1>(injector,
        ids));
    typename i::Key<A2>::Ptr a2(this->template getDependency<A2>(injector,
        ids));
    typename i::Key<A3>::Ptr a3(this->template getDependency<A3>(injector,
        ids));
    typename i::Key<A4>::Ptr a4(this->template getDependency<A4>(injector,
        ids));
    typename i::Key<A5>::Ptr a5(this->template getDependency<A5>(injector,
        ids));
    typename i::Key<A6>::Ptr a6(this->template getDependency<A6>(injector,
        ids));
    typename i::Key<A7>::Ptr a7(this->template getDependency<A7>(injector,
        ids));
    typename i::Key<A8>::Ptr a8(this->template getDependency<A8>(injector,
        ids));
    ImplAllocator allocator;
    Impl * impl = allocator.allocate(1);
    new(impl) Impl(a1, a2, a3, a4, a5, a6, a7, a8);
    return impl;
  }

  void dispose(Impl * impl) const {
    ImplAllocator allocator;
    impl->~Impl(); // Must not throw
    allocator.deallocate(impl, 1);
  }
};

template<typename Dependency, typename Scope, typename Impl,
    typename Allocator, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7, typename A8, typename A9>
struct NewBinding<Dependency, Scope, Impl(A1, A2, A3, A4, A5, A6, A7, A8, A9),
    Allocator>: public TransparentBinding<Dependency, Scope, Impl> {
  typedef typename Allocator::template rebind<Impl>::other ImplAllocator;

  Impl * provide(sauce::shared_ptr<Injector> injector, TypeIds & ids) const {
    typename i::Key<A1>::Ptr a1(this->template getDependency<A1>(injector,
        ids));
    typename i::Key<A2>::Ptr a2(this->template getDependency<A2>(injector,
        ids));
    typename i::Key<A3>::Ptr a3(this->template getDependency<A3>(injector,
        ids));
    typename i::Key<A4>::Ptr a4(this->template getDependency<A4>(injector,
        ids));
    typename i::Key<A5>::Ptr a5(this->template getDependency<A5>(injector,
        ids));
    typename i::Key<A6>::Ptr a6(this->template getDependency<A6>(injector,
        ids));
    typename i::Key<A7>::Ptr a7(this->template getDependency<A7>(injector,
        ids));
    typename i::Key<A8>::Ptr a8(this->template getDependency<A8>(injector,
        ids));
    typename i::Key<A9>::Ptr a9(this->template getDependency<A9>(injector,
        ids));
    ImplAllocator allocator;
    Impl * impl = allocator.allocate(1);
    new(impl) Impl(a1, a2, a3, a4, a5, a6, a7, a8, a9);
    return impl;
  }

  void dispose(Impl * impl) const {
    ImplAllocator allocator;
    impl->~Impl(); // Must not throw
    allocator.deallocate(impl, 1);
  }
};

template<typename Dependency, typename Scope, typename Impl,
    typename Allocator, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7, typename A8, typename A9,
    typename A10>
struct NewBinding<Dependency, Scope, Impl(A1, A2, A3, A4, A5, A6, A7, A8, A9,
    A10), Allocator>: public TransparentBinding<Dependency, Scope, Impl> {
  typedef typename Allocator::template rebind<Impl>::other ImplAllocator;

  Impl * provide(sauce::shared_ptr<Injector> injector, TypeIds & ids) const {
    typename i::Key<A1>::Ptr a1(this->template getDependency<A1>(injector,
        ids));
    typename i::Key<A2>::Ptr a2(this->template getDependency<A2>(injector,
        ids));
    typename i::Key<A3>::Ptr a3(this->template getDependency<A3>(injector,
        ids));
    typename i::Key<A4>::Ptr a4(this->template getDependency<A4>(injector,
        ids));
    typename i::Key<A5>::Ptr a5(this->template getDependency<A5>(injector,
        ids));
    typename i::Key<A6>::Ptr a6(this->template getDependency<A6>(injector,
        ids));
    typename i::Key<A7>::Ptr a7(this->template getDependency<A7>(injector,
        ids));
    typename i::Key<A8>::Ptr a8(this->template getDependency<A8>(injector,
        ids));
    typename i::Key<A9>::Ptr a9(this->template getDependency<A9>(injector,
        ids));
    typename i::Key<A10>::Ptr a10(this->template getDependency<A10>(injector,
        ids));
    ImplAllocator allocator;
    Impl * impl = allocator.allocate(1);
    new(impl) Impl(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    return impl;
  }

  void dispose(Impl * impl) const {
    ImplAllocator allocator;
    impl->~Impl(); // Must not throw
    allocator.deallocate(impl, 1);
  }
};

}
}

namespace i = ::sauce::internal;
namespace b = ::sauce::internal::bindings;

}

#endif // SAUCE_SAUCE_INTERNAL_BINDINGS_NEW_H_
