$$ This is a Pump source file.  Please use Pump to convert it to
$$ generated_bindings.h
$$
$var n = 10  $$ The maximum arity we support.
// -*- C++ -*-
#ifndef SAUCE_SAUCE_INTERNAL_GENERATED_BINDINGS_H_
#define SAUCE_SAUCE_INTERNAL_GENERATED_BINDINGS_H_

#include <sauce/memory>

namespace sauce {
namespace internal {
namespace bindings {

template<typename Injector>
class Binding;

template<typename Injector, typename Iface, typename Allocator, typename Constructor>
class New;

$range i 0..n
$for i [[
$range j 1..i
$var comma_typename_As = [[$for j [[, typename A$j]]]]
$var comma_shared_As = [[$for j [[, SAUCE_SHARED_PTR<A$j>]]]]
$var As = [[$for j, [[A$j]]]]
$var comma_as = [[$for j [[, a$j]]]]

template<typename Injector, typename Iface, typename Allocator, typename Impl$comma_typename_As>
class New<Injector, Iface, Allocator, Impl($As)>: public Binding<Injector> {
public:
  static Impl * provide(Injector const & injector) {
[[$for j [[
    SAUCE_SHARED_PTR<A$j> a$j(injector.template provide<A$j>());

]]]]

    Allocator allocator;
    Impl * impl = allocator.allocate(1);
    initializer(injector).template construct<Impl$comma_shared_As >(impl$comma_as);
    return impl;
  }

  static void dispose(Injector const & injector, Iface * iface) {
    Allocator allocator;
    Impl * impl = static_cast<Impl *>(iface);
    initializer(injector).destroy(impl);
    allocator.deallocate(impl, 1);
  }
};

]]

}
}
}

#endif