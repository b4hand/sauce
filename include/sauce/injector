// -*- C++ -*-
#ifndef SAUCE_SAUCE_INJECTOR_H_
#define SAUCE_SAUCE_INJECTOR_H_

#include <sauce/memory>
#include <sauce/internal/bindings>
#include <sauce/internal/deleter>
#include <sauce/internal/new_delete>

namespace sauce {

namespace test {
class SauceTest;
}

template<typename Module, typename NewDelete_ = ::sauce::internal::NewDelete>
class Injector {
private:

  typedef NewDelete_ NewDelete;
  typedef Injector<Module, NewDelete> Injector_;

  NewDelete mutable newDelete;

public:

  friend class ::sauce::test::SauceTest;
  friend class ::sauce::internal::Deleter<Injector_>;
  friend class ::sauce::internal::bindings::Binding<Injector_>;

  Injector():
    newDelete() {}

  virtual ~Injector() {}

  template<typename Iface>
  SAUCE_SHARED_PTR<Iface> provide() const {
    // Resolve the interface into a binding with EXTRA SUPER MAGIC
    Iface * provided = provideFromBinding<Iface>(
      Module::template bindings<Injector_> );

    // Use a custom deleter for the shared_ptr
    sauce::internal::Deleter<Injector_> deleter(*this);

    // Wrap and return the provided implementation in the chosen shared_ptr
    SAUCE_SHARED_PTR<Iface> smartPointer;
    smartPointer.reset(provided, deleter);
    return smartPointer;
  }

private:

  template<typename Iface>
  void dispose(Iface * iface) const {
    disposeFromBinding<Iface>(
      Module::template bindings<Injector_>, iface);
  }

  template<typename Iface, typename Binding>
  Iface * provideFromBinding(Binding * binding(Iface *)) const {
    return Binding::provide(*this);
  }

  template<typename Iface, typename Binding>
  void disposeFromBinding(Binding * binding(Iface *), Iface * iface) const {
    Binding::dispose(*this, iface);
  }

};

}

#endif // ifndef SAUCE_SAUCE_INJECTOR_H_