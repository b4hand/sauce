// -*- C++ -*-
#ifndef SAUCE_SAUCE_INJECTOR_H_
#define SAUCE_SAUCE_INJECTOR_H_

#include <sauce/builder>
#include <sauce/memory>
#include <sauce/internal/bindings>
#include <sauce/internal/deleter>

namespace sauce {

template<typename Module_>
class Injector {

  typedef Module_ Module;
  typedef Injector<Module> Injector_;

public:

  Injector() {}
  virtual ~Injector() {}

  template<typename Iface>
  SAUCE_SHARED_PTR<Iface> get() const {
    // Delegate after resolving the binding with EXTRA SUPER MAGIC
    return resolveAndProvide<Iface>(&Module::template bindings<Injector_> );
  }

private:

  template<typename Iface, typename Binding>
  SAUCE_SHARED_PTR<Iface> resolveAndProvide(Binding * (*)(Iface)) const {
    // Ask the binding to provide an implementation
    typename Binding::IfacePointer provided = Binding::provide(*this);

    // Make a deleter
    typedef ::sauce::internal::Deleter<Binding, Injector_> Deleter_;
    Deleter_ deleter(*this);

    // Wrap in a smart pointer
    SAUCE_SHARED_PTR<Iface> smartPointer;
    smartPointer.reset(provided, deleter);
    return smartPointer;
  }

};

}

#endif // ifndef SAUCE_SAUCE_INJECTOR_H_