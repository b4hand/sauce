// -*- C++ -*-
#ifndef SAUCE_SAUCE_INJECTOR_H_
#define SAUCE_SAUCE_INJECTOR_H_

#include <sauce/builder>
#include <sauce/memory>
#include <sauce/internal/bindings>
#include <sauce/internal/deleter>

namespace sauce {

template<typename Module>
class Injector {
private:

  typedef Module Module_;
  typedef Injector<Module_> Injector_;
  typedef ::sauce::internal::Deleter<Injector_> Deleter_;

  Deleter_ deleter;

public:

  friend class ::sauce::internal::Deleter<Injector_>;
  friend class ::sauce::internal::bindings::Binding<Injector_>;

  Injector():
    deleter(*this) {}

  virtual ~Injector() {}

  template<typename Iface>
  SAUCE_SHARED_PTR<Iface> get() const {
    // Resolve the interface into a binding with EXTRA SUPER MAGIC
    Iface * provided = resolveAndProvide<Iface>(
      &Module_::template bindings<Injector_> );

    // Wrap and return the provided implementation in the chosen shared_ptr
    SAUCE_SHARED_PTR<Iface> smartPointer;
    smartPointer.reset(provided, deleter);
    return smartPointer;
  }

private:

  template<typename Iface>
  void dispose(Iface * iface) const {
    resolveAndDispose<Iface>(
      &Module_::template bindings<Injector_>, iface);
  }

  template<typename Iface, typename Binding>
  Iface * resolveAndProvide(Binding * (*)(Iface)) const {
    return Binding::provide(*this);
  }

  template<typename Iface, typename Binding>
  void resolveAndDispose(Binding * (*)(Iface), Iface * iface) const {
    Binding::dispose(*this, iface);
  }

};

}

#endif // ifndef SAUCE_SAUCE_INJECTOR_H_